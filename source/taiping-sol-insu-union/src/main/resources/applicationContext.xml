<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:oscache="http://www.springmodules.org/schema/oscache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">

	<!-- JDBC参数配置 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		lazy-init="true">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:memcached.properties</value>
			</list>
		</property>
	</bean>

	<!-- JNDI配置start -->
	<bean id="dataSourceRead" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${jdbc.jndiName_read}" />
		<property name="resourceRef" value="true" />
	</bean>
	<bean id="dataSourceWrite" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${jdbc.jndiName_write}" />
		<property name="resourceRef" value="true" />
	</bean>
	<!-- JNDI配置 end -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置Hibernate拦截器,自动填充数据的插入、更新时间 -->
		<property name="dataSource" ref="dataSourceRead" />
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=${hibernate.dialect}
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				<!-- hibernate.hbm2ddl.auto=update -->
				<!-- 输出SQL语句到控制台 -->
				hibernate.show_sql=${hibernate.show_sql}
				<!-- 格式化输出到控制台的SQL语句 -->
				hibernate.format_sql=${hibernate.format_sql}
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 配置二级缓存产品 -->
				hibernate.cache.provider_class=org.hibernate.cache.OSCacheProvider
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询数 -->
				hibernate.jdbc.fetch_size=50
				<!-- 数据库批量更新数 -->
				hibernate.jdbc.batch_size=30
			</value>
		</property>
		<!-- <property name="annotatedClasses"> <list> <value> com.taiping.xxx.entity.JC_AGREEMENT 
			</value> </list> </property> -->
		<property name="packagesToScan" value="com.taiping.*.entity" />
	</bean>
	<!-- read end -->

	<bean id="sessionFactoryWrite"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置Hibernate拦截器,自动填充数据的插入、更新时间 -->
		<property name="dataSource" ref="dataSourceWrite" />
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=${hibernate.dialect}
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				<!-- hibernate.hbm2ddl.auto=update -->
				<!-- 输出SQL语句到控制台 -->
				hibernate.show_sql=${hibernate.show_sql}
				<!-- 格式化输出到控制台的SQL语句 -->
				hibernate.format_sql=${hibernate.format_sql}
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 配置二级缓存产品 -->
				hibernate.cache.provider_class=org.hibernate.cache.OSCacheProvider
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询数 -->
				hibernate.jdbc.fetch_size=50
				<!-- 数据库批量更新数 -->
				hibernate.jdbc.batch_size=30
			</value>
		</property>
		<!-- <property name="annotatedClasses"> <list> <value> com.taiping.xxx.entity.JC_AGREEMENT 
			</value> </list> </property> -->
		<property name="packagesToScan" value="com.taiping.*.entity" />
	</bean>
	<!-- write end -->


	<!-- 设置需要进行Spring注解扫描的类包 -->
	<context:component-scan base-package="com.taiping" />

	<!-- 使用AspectJ方式配置AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config proxy-target-class="true" />

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactoryWrite" />
	</bean>

	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>


	<!-- 缓存配置 -->
	<!-- 启用缓存注解功能 使用spring3的 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="default" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="andCache" />
			</set>
		</property>
	</bean>

	<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"
		factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<constructor-arg>
			<value>neeaMemcachedPool</value>
		</constructor-arg>
		<property name="servers" value="${memcache.server}" />
		<property name="initConn" value="${memcache.initConn}" />
		<property name="minConn" value="${memcache.minConn}" />
		<property name="maxConn" value="${memcache.maxConn}" />
		<property name="maintSleep" value="${memcache.maintSleep}" />
		<property name="nagle" value="${memcache.nagle}" />
		<property name="socketTO" value="${memcache.socketTO}" />
	</bean>

	<bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg>
			<value>neeaMemcachedPool</value>
		</constructor-arg>
		<property name="compressEnable">
			<value>true</value>
		</property>
		<property name="compressThreshold">
			<value>4096</value>
		</property>
	</bean>

	<!-- 配置freemarkerManager -->
	<bean id="freemarkerManager" class="org.apache.struts2.views.freemarker.FreemarkerManager" />

	<bean id="buildDictionary" class="com.taiping.framework.servlet.BuildDictionary"
		init-method="initDicContainer" />

</beans>